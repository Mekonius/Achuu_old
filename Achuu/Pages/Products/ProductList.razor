@page "/products"

@using Achuu.Models
@using Achuu.Models.Services

@inject ProductService productService

<PageTitle>Product List</PageTitle>

<h1>Product List</h1>

<!-- a button that links to the create site -->
<a href="/products/create">Create New Product</a>

@if (products == null)
{
    <p>Loading...</p>
}
else if (products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    @foreach (var product in products)
    {
        <div>
            <h2>@product.Name</h2>
            <p>@product.Description</p>
            <h3>Ingredients</h3>
            <p>Image</p>
            <img src="@product.Image_link" alt="@product.Name" width="250" />


            @if (product.Ingredients != null && product.Ingredients.Count > 0)
            {
                <ul>
                    @foreach (var ingredient in product.Ingredients)
                    {
                        <li>@ingredient.Name - Can tolerate: @ingredient.IsAllergic</li>
                    }
                </ul>
            }
            else
            {
                <p>No ingredients found.</p>
            }


            <button class="btn-delete" @onclick="() => ShowConfirmation(product)">X</button>


            @if (showConfirmationModal)
            {
                <div class="confirmation-modal">
                    <div class="confirmation-content">
                        <p>Are you sure you want to delete this product?</p>
                        <button class="btn-confirm" @onclick="() => DeleteProduct(product)">Confirm</button>
                        <button class="btn-cancel" @onclick="() => CloseConfirmation()">Cancel</button>
                        @{
                            showConfirmationModal = false;
                        }
                    </div>
                </div>
            }

        </div>
        <hr />
    }
    <div>
        @for (int i = 1; i <= totalPages; i++)
        {
            <button @onclick="() => ChangePage(i)">@i</button>
        }
    </div>
}

@code {
    private bool showConfirmationModal = false;
    private Product ?product;
    private List<Product>? products;
    private int currentPage = 1;
    private int pageSize = 10; // Adjust the number of items per page as needed

    private int totalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private int totalItems;

    protected override async Task OnInitializedAsync()
    {
        productService.GetJsonFeed();
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        var result = await productService.GetProductsAsync(currentPage, pageSize);
        products = result.products;
        totalItems = result.totalItems;
    }


    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadProductsAsync();
    }





    // Method to show the confirmation modal
    private void ShowConfirmation(Product product)
    {
        showConfirmationModal = true;
    }

    // Method to close the confirmation modal
    private void CloseConfirmation()
    {
        showConfirmationModal = false;
    }


    private async Task DeleteProduct(Product product)
    {
        // Call the DeleteProductAsync method from the ProductService to delete the product
        var result = await productService.DeleteProductAsync(product.ProductID.Value, currentPage, pageSize);
        products = result.products;
        totalItems = result.totalItems;
    }

}

