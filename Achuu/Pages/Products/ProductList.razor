@page "/products"
@inject IJSRuntime JSRuntime



@using Achuu.Models
@using Achuu.Models.Services
@using Achuu.Components

@inject ProductService productService

<PageTitle>Product List</PageTitle>

<h1>Product List</h1>

<!-- a button that links to the create site -->
<a href="/products/create">Create New Product</a>


<button class="btn-get-json-feed" @onclick="GetJsonFeed">Get JSON Feed</button>



@code {
    private bool imageExists = true;
    private string imageUrl = "@PlaceholderImage"; // Replace with your image URL
}

@code {
    private async Task GetJsonFeed() => productService.GetJsonFeed();

    private string PlaceHolderImage = "/media/250.png";

    private async Task CheckImage(Product product)
    {
        var success = await JSRuntime.InvokeAsync<bool>("imageErrorCheck.checkImage", product.Image_link);
        if (!success)
        {
            product.Image_link = PlaceHolderImage;
        }
    }

}





@if (products == null)
{
    <p>Loading...</p>
}
else if (products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    @foreach (var product in products)
    {
        <div>
            <h2>@product.Name</h2>
            <p>@product.Description</p>
            <h3>Ingredients</h3>

            <img src="@product.Image_link" @onerror="async () => await CheckImage(product)" alt="Product image" />


            <br />


            <button class="btn-delete" @onclick="() => ShowConfirmation(product)">Slet dette produkt</button>


            @if (showConfirmationModal)
            {
                <div class="confirmation-modal">
                    <div class="confirmation-content">
                        <p>Are you sure you want to delete this product?</p>
                        <button class="btn-confirm" @onclick="() => DeleteProduct(product)">Confirm</button>
                        <button class="btn-cancel" @onclick="() => CloseConfirmation()">Cancel</button>
                        @{
                            showConfirmationModal = false;
                        }
                    </div>
                </div>
            }

        </div>
        <hr />
    }
    <PaginationComponent pageNumber="@pageNumber" IsFirstPage="@IsFirstPage" IsLastPage="@IsLastPage"
                         OnPreviousClicked="PreviousPage" OnNextClicked="NextPage" />
}

@inject IHttpClientFactory HttpClientFactory
@using System.Net
@code {
    private bool showConfirmationModal = false;
    private Product? product;
    private List<Product>? products;
    private int currentPage = 1;
    private int pageSize = 10; // Adjust the number of items per page as needed
    private int pageNumber = 1;

    private int totalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private int totalItems;

    private bool IsFirstPage => pageNumber == 1;
    private bool IsLastPage => products.Count < pageSize;

    private async Task<string?> GetImageAsync(Product? product)
    {
        using var httpClient = HttpClientFactory.CreateClient();

        var response = await httpClient.GetAsync(product.Image_link);

        if (response.StatusCode == HttpStatusCode.OK)
        {
            var bytes = await response.Content.ReadAsByteArrayAsync();

            return $"data:image/png;base64,{bytes}";
        }

        return string.Empty; // TODO: Insert placeholder image...
    }



    protected override async Task OnInitializedAsync()
    {
        //productService.GetJsonFeed();
        await LoadProductsAsync();
        await LoadData();
    }

    private async Task LoadProductsAsync()
    {
        var result = await productService.GetProductsAsync(pageNumber, pageSize);
        products = result.products;
        totalItems = result.totalItems;
    }

    private async Task LoadData()
    {
        try
        {
            var (resultProducts, totalItems, currentPageNumber) = await productService.GetProductsAsync(pageNumber, pageSize);
            products = resultProducts;
            this.totalItems = totalItems;
            pageNumber = currentPageNumber; // Update the pageNumber from the result
        }
        catch (Exception ex)
        {
            // Handle the exception, e.g., display an error message.
        }
    }


    private async Task NextPage()
    {
        pageNumber++;
        await LoadProductsAsync();
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await LoadProductsAsync();
        }
    }


    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadProductsAsync();
    }





    // Method to show the confirmation modal
    private void ShowConfirmation(Product product)
    {
        showConfirmationModal = true;
    }

    // Method to close the confirmation modal
    private void CloseConfirmation()
    {
        showConfirmationModal = false;
    }


    private async Task DeleteProduct(Product product)
    {
        // Call the DeleteProductAsync method from the ProductService to delete the product
        var result = await productService.DeleteProductAsync(product.ProductID, currentPage, pageSize);
        products = result.products;
        totalItems = result.totalItems;
    }

}

